import asyncio
import os
import random
import uvloop
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

def generate_2d_array(n):
    array = [[random.randint(1, 100), random.randint(1, 100)] for _ in range(n)]
    return array


async def run_testmain(par_file, index):
    # Generate TSP file
    tsp_file = 'tsp_file.tsp'.format(index)
 
    cities = generate_2d_array(40)
    generate_tsp_file(tsp_file, cities)

    # Generate parameter file
    generate_parameter_file(par_file, index)

    # Run LKH
    cmd = ['../LKH', par_file]
    proc = await asyncio.create_subprocess_exec(*cmd)
    await proc.wait()

def generate_tsp_file(filename, cities):
    with open(filename, 'w') as f:
        # Write the header
        f.write('NAME: {}\n'.format(filename))
        f.write('COMMENT: {}\n'.format('TSP file generated by Python'))
        f.write('TYPE: TSP\n')
        f.write('DIMENSION: {}\n'.format(len(cities)))
        f.write('EDGE_WEIGHT_TYPE: EUC_2D\n')
        # Write the city coordinates
        f.write('NODE_COORD_SECTION\n')
        for i, city in enumerate(cities):
            f.write('{} {} {}\n'.format(i + 1, city[0], city[1]))

        # Write the footer
        f.write('EOF\n')
def generate_parameter_file(output_filename, index):
    parameters = [
        "PROBLEM_FILE = tsp_file.tsp",
        "MOVE_TYPE = 5",
        "PATCHING_C = 3",
        "PATCHING_A = 2",
        "RUNS = 10",
        "TOUR_FILE = lkh_output{}.tour".format(index)
    ]
    with open(output_filename, 'w') as f:
        f.write('\n'.join(parameters))

async def main():
    # Run multiple testmain functions asynchronously
    tasks = []
    # 异步数量设置为10，但取决于公司服务器的算力;
    for i in range(100):
        par_file = 'pr{}.par'.format(i)
        tasks.append(asyncio.create_task(run_testmain(par_file, i)))
    await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.run(main())
